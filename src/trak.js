// Generated by IcedCoffeeScript 1.7.1-b
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('Trak', ['jsonp', 'exceptions', 'io-query', 'cookie', 'lodash'], function(JSONP, Exceptions, ioQuery, cookie, _) {
  var Trak;
  return Trak = (function() {
    Trak.prototype.loaded = true;

    Trak.prototype.Exceptions = Exceptions;

    Trak.prototype.cookie = cookie;

    Trak.prototype.minified = false;

    Trak.instances = [];

    function Trak() {
      this.context = __bind(this.context, this);
      this.default_context = __bind(this.default_context, this);
      this.current_context = __bind(this.current_context, this);
      this.host = __bind(this.host, this);
      this.protocol = __bind(this.protocol, this);
      this.page_view = __bind(this.page_view, this);
      this.track = __bind(this.track, this);
      this.alias = __bind(this.alias, this);
      this.company = __bind(this.company, this);
      this.identify = __bind(this.identify, this);
      this.call = __bind(this.call, this);
      this.on_page_ready = __bind(this.on_page_ready, this);
      this.page_ready = __bind(this.page_ready, this);
      this.loaded_automagic = __bind(this.loaded_automagic, this);
      this.load_automagic = __bind(this.load_automagic, this);
      this.initialise = __bind(this.initialise, this);
      this.initialize = __bind(this.initialize, this);
      this.io = this;
    }

    Trak.prototype.initialize = function(_api_token, options) {
      var me;
      this._api_token = _api_token;
      this.options = options != null ? options : {};
      this.protocol(this.options.protocol);
      if (this.options.host) {
        this.host(this.options.host);
      }
      if (this.options.context) {
        this.context(this.options.context);
      }
      if (this.options.channel) {
        this.channel(this.options.channel);
      }
      if (typeof this.options.alias_on_identify !== 'undefined') {
        this.alias_on_identify(this.options.alias_on_identify);
      }
      this.distinct_id(this.options.distinct_id || null);
      this.company_id(this.options.company_id || null);
      this.root_domain(this.options.root_domain || null);
      this.page_ready_event_fired = false;
      if (this.options.automagic) {
        if (!this.automagic) {
          this.load_automagic(this.options.automagic);
        }
      } else {
        this.automagic = false;
      }
      me = this;
      this.on_page_ready(this.page_ready);
      Trak.instances.push(this);
      return this;
    };

    Trak.prototype.initialise = function() {
      return this.initialize.apply(this, arguments);
    };

    Trak.prototype.load_automagic = function(options) {
      var head, host, me, script, script_src;
      this.automagic_options = options;
      script = document.createElement('script');
      host = options.host || 'd29p64779x43zo.cloudfront.net/v1';
      if (this.minified) {
        script_src = 'trak.io.automagic.min.js';
      } else {
        script_src = 'trak.io.automagic.js';
      }
      script.src = "//" + host + "/" + script_src;
      me = this;
      head = document.head || document.getElementsByTagName("head")[0];
      return head.insertBefore(script, head.firstChild);
    };

    Trak.prototype.loaded_automagic = function() {
      this.automagic = new Trak.Automagic;
      if (this.automagic_options && this.automagic_options.test_hooks && this.automagic_options.test_hooks[0]) {
        this.automagic_options.test_hooks[0](this.automagic);
      }
      this.automagic.initialize(this.automagic_options);
      if (this.automagic_options && this.automagic_options.test_hooks && this.automagic_options.test_hooks[1]) {
        return this.automagic_options.test_hooks[1](this.automagic);
      }
    };

    Trak.prototype.page_ready = function() {
      if (this.options.auto_track_page_views !== false) {
        this.page_view();
      }
      if (this.automagic) {
        return this.automagic.page_ready();
      }
    };

    Trak.prototype.page_ready_event_fired = false;

    Trak.prototype.on_page_ready = function(fn) {
      var do_oll_check, idempotent_fn, me, toplevel;
      me = this;
      idempotent_fn = function() {
        if (me.page_ready_event_fired) {
          return;
        }
        fn();
        return me.page_ready_event_fired = true;
      };
      do_oll_check = function() {
        var e;
        if (this.page_ready_event_fired) {
          return;
        }
        try {
          document.documentElement.doScroll("left");
        } catch (_error) {
          e = _error;
          setTimeout(do_oll_check, 1);
          return;
        }
        return idempotent_fn();
      };
      if (document.readyState === "complete") {
        return idempotent_fn();
      }
      if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", idempotent_fn, false);
        return window.addEventListener("load", idempotent_fn, false);
      } else if (document.attachEvent) {
        document.attachEvent("onreadystatechange", idempotent_fn);
        window.attachEvent("onload", idempotent_fn);
        toplevel = false;
        try {
          toplevel = window.frameElement == null;
        } catch (_error) {}
        if (document.documentElement.doScroll && toplevel) {
          return do_oll_check();
        }
      }
    };

    Trak.prototype.jsonp = new JSONP();

    Trak.prototype.call = function() {
      return this.jsonp.call.apply(this.jsonp, arguments);
    };

    Trak.prototype.identify = function() {
      var args, callback, distinct_id, identify_call, me, properties, properties_length, property, v;
      me = this;
      if (typeof arguments[0] === 'number') {
        arguments[0] = arguments[0].toString();
      }
      args = this.sort_arguments(arguments, ['string', 'object', 'function']);
      distinct_id = args[0] || this.distinct_id();
      properties = this.proccess_companies(args[1]) || null;
      callback = args[2] || null;
      this.should_track(true);
      properties_length = 0;
      for (property in properties) {
        v = properties[property];
        properties_length++;
      }
      identify_call = function(data) {
        if (properties) {
          return me.call('identify', {
            data: {
              distinct_id: distinct_id,
              properties: properties
            }
          }, callback);
        } else {
          if (callback) {
            return callback(data);
          }
        }
      };
      if (args[0] && this.alias_on_identify()) {
        me.alias(distinct_id, identify_call);
      } else if (properties && properties_length > 0) {
        identify_call();
      } else if (callback) {
        callback({
          status: 'unnecessary'
        });
      }
      return this;
    };

    Trak.prototype.proccess_companies = function(properties) {
      var company, has, _i, _len, _ref;
      if (!properties) {
        return null;
      }
      if (typeof properties.company === 'string') {
        properties.company_name = properties.company;
        delete properties.company;
      }
      properties.company || (properties.company = []);
      if (!(properties.company instanceof Array)) {
        properties.company = [properties.company];
      }
      properties.companies || (properties.companies = []);
      if (!(properties.companies instanceof Array)) {
        properties.companies = [properties.companies];
      }
      properties.company = properties.company.concat(properties.companies);
      delete properties.companies;
      if (this.company_id()) {
        has = false;
        _ref = properties.company;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          company = _ref[_i];
          if (company.company_id === this.company_id()) {
            has = true;
          }
        }
        if (has) {
          properties.company << {
            company_id: this.company_id()
          };
        }
      }
      if (properties.company.length === 0) {
        delete properties.company;
      }
      return properties;
    };

    Trak.prototype.company = function() {
      var args, callback, company_id, data, distinct_id, properties, properties_length, property, v;
      if (typeof arguments[0] === 'number') {
        arguments[0] = arguments[0].toString();
      }
      args = this.sort_arguments(arguments, ['string', 'object', 'function']);
      company_id = args[0] || this.company_id();
      distinct_id = this.distinct_id();
      properties = args[1] || null;
      callback = args[2] || null;
      properties_length = 0;
      for (property in properties) {
        v = properties[property];
        properties_length++;
      }
      if (company_id) {
        this.company_id(company_id);
      } else {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide an `company_id`, see http://docs.trak.io/company.html');
      }
      data = {
        company_id: company_id
      };
      if (properties && properties_length > 0) {
        data.properties = properties;
      }
      if (distinct_id && this.should_track()) {
        data.people_distinct_ids = [distinct_id];
      }
      if ((properties && properties_length > 0) || (distinct_id && this.should_track())) {
        this.call('company', {
          data: data
        }, callback);
      } else if (callback) {
        callback({
          status: 'unnecessary'
        });
      }
      return this;
    };

    Trak.prototype.alias = function() {
      var alias, args, callback, distinct_id, update_distinct;
      if (typeof arguments[0] === 'number') {
        arguments[0] = arguments[0].toString();
      }
      args = this.sort_arguments(arguments, ['string', 'string', 'boolean', 'function']);
      distinct_id = (args[1] ? args[0] : void 0) || this.distinct_id();
      alias = args[1] ? args[1] : args[0];
      update_distinct = args[2] !== null ? args[2] : (args[1] ? false : true);
      callback = args[3] || null;
      if (!alias) {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide an alias, see http://docs.trak.io/alias.html');
      }
      if (alias !== distinct_id) {
        this.call('alias', {
          data: {
            distinct_id: distinct_id,
            alias: alias
          }
        }, callback);
        if (update_distinct) {
          this.distinct_id(alias);
        }
      } else if (callback) {
        callback({
          status: 'unnecessary'
        });
      }
      return this;
    };

    Trak.prototype.track = function() {
      var arg_offset, args, callback, channel, company_id, context, data, distinct_id, event, properties;
      args = this.sort_arguments(arguments, ['string', 'string', 'string', 'string', 'object', 'object', 'function']);
      distinct_id = (args[2] ? arguments[0] : void 0) || this.distinct_id();
      if (arguments[0] === false) {
        distinct_id = null;
      }
      company_id = (args[3] ? arguments[1] : void 0) || this.company_id();
      if (arguments[1] === false) {
        company_id = null;
      }
      if (args[2]) {
        arg_offset = 1;
      } else {
        arg_offset = 0;
      }
      if (args[3]) {
        arg_offset += 1;
      }
      event = args[0 + arg_offset];
      channel = args[1 + arg_offset] || this.channel();
      properties = args[4] || {};
      context = args[5] || {};
      context = _.merge(this.context(), context);
      callback = args[6] || null;
      if (!event) {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide an event to track, see http://docs.trak.io/track.html');
      }
      if (!(company_id || distinct_id)) {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide either a distinct_id and/or a company_id to track the event against, see http://docs.trak.io/track.html');
      }
      data = {
        event: event,
        channel: channel,
        context: context,
        properties: properties
      };
      if (distinct_id) {
        data.distinct_id = distinct_id;
      }
      if (company_id) {
        data.company_id = company_id;
      }
      if (this.should_track()) {
        this.call('track', {
          data: data
        }, callback);
      }
      return this;
    };

    Trak.prototype.page_view = function() {
      var args, callback, title, url;
      args = this.sort_arguments(arguments, ['string', 'string', 'function']);
      url = args[0] || this.url();
      title = args[1] || this.page_title();
      callback = args[2] || null;
      this.track('page_view', {
        url: url,
        page_title: title
      }, callback);
      return this;
    };

    Trak.prototype._protocol = 'https';

    Trak.prototype.protocol = function(value) {
      if (value) {
        this._protocol = value;
      }
      return "" + this._protocol + "://";
    };

    Trak.prototype._host = 'api.trak.io/v1';

    Trak.prototype.host = function(value) {
      if (value) {
        this._host = value;
      }
      return this._host;
    };

    Trak.prototype._current_context = false;

    Trak.prototype.current_context = function(key, value) {
      var c;
      if (!this._current_context) {
        if (c = this.get_cookie('context')) {
          this._current_context = JSON.parse(c);
        } else {
          this._current_context = {};
        }
      }
      if (typeof key === 'object') {
        _.merge(this._current_context, key);
      } else if (key && value) {
        this._current_context[key] = value;
      }
      this.set_cookie('context', JSON.stringify(this._current_context));
      return this._current_context;
    };

    Trak.prototype.default_context = function() {
      var referer, url;
      url = this.url();
      referer = this.referer();
      return {
        ip: null,
        user_agent: navigator.userAgent,
        page_title: this.page_title(),
        url: url,
        params: url.indexOf("?") > 0 ? ioQuery.queryToObject(url.substring(url.indexOf("?") + 1, url.length)) : {},
        referer: referer,
        referer_params: referer.indexOf("?") > 0 ? ioQuery.queryToObject(referer.substring(referer.indexOf("?") + 1, referer.length)) : {}
      };
    };

    Trak.prototype.context = function(key, value) {
      var r;
      r = {};
      _.merge(r, this.default_context(), this.current_context(key, value));
      return r;
    };

    Trak.prototype.url = function() {
      return window.location.href;
    };

    Trak.prototype.referer = function() {
      return document.referrer;
    };

    Trak.prototype.page_title = function() {
      return document.title;
    };

    Trak.prototype.hostname = function() {
      return document.location.hostname;
    };

    Trak.prototype.url_params = function() {
      return window.location.search;
    };

    Trak.prototype.get_distinct_id_url_param = function() {
      var matches;
      if ((matches = this.url_params().match(/\?.*trak_distinct_id\=([^&]+).*/))) {
        return decodeURIComponent(matches[1]);
      }
    };

    Trak.prototype.get_company_id_url_param = function() {
      var matches;
      if ((matches = this.url_params().match(/\?.*trak_company_id\=([^&]+).*/))) {
        return decodeURIComponent(matches[1]);
      }
    };

    Trak.prototype._channel = false;

    Trak.prototype.channel = function(value) {
      if (!this._channel && !(this._channel = this.get_cookie('channel'))) {
        this._channel = this.hostname() || 'web_site';
      }
      if (value) {
        this._channel = value;
        this.set_cookie('channel', value);
      }
      return this._channel;
    };

    Trak.prototype._should_track = null;

    Trak.prototype.should_track = function(value) {
      if (this._should_track === null) {
        this._should_track = this.get_cookie('should_track') === 'true';
      }
      if (typeof value !== 'undefined') {
        this._should_track = value;
        this.set_cookie('should_track', value);
      }
      return this._should_track;
    };

    Trak.prototype._alias_on_identify = true;

    Trak.prototype.alias_on_identify = function(value) {
      if (typeof value !== 'undefined') {
        this._alias_on_identify = value;
      }
      return this._alias_on_identify;
    };

    Trak.prototype._api_token = null;

    Trak.prototype.api_token = function() {
      return this._api_token;
    };

    Trak.prototype._distinct_id = null;

    Trak.prototype.distinct_id = function(value) {
      var options;
      if (typeof value === 'number') {
        value = value.toString();
      }
      if (value) {
        this._distinct_id = value;
        this.should_track(true);
      }
      if (!this._distinct_id && !(this._distinct_id = this.get_distinct_id_url_param()) && !(this._distinct_id = this.get_cookie('id'))) {
        this._distinct_id = this.generate_distinct_id();
      }
      options = this.root_domain() === 'localhost' ? {} : {
        domain: this.root_domain()
      };
      cookie.set(this.cookie_key('id'), this._distinct_id, options);
      return this._distinct_id;
    };

    Trak.prototype._company_id = null;

    Trak.prototype.company_id = function(value) {
      var options;
      if (typeof value === 'number') {
        value = value.toString();
      }
      if (value) {
        this._company_id = value;
      }
      if (!this._company_id) {
        if (!(this._company_id = this.get_company_id_url_param())) {
          this._company_id = this.get_cookie('company_id');
        }
      }
      options = this.root_domain() === 'localhost' ? {} : {
        domain: this.root_domain()
      };
      if (this._company_id) {
        cookie.set(this.cookie_key('company_id'), this._company_id, options);
      }
      return this._company_id;
    };

    Trak.prototype.unset_company_id = function() {
      this._company_id = null;
      return cookie.set(this.cookie_key('company_id'), '0', {
        expires: -1
      });
    };

    Trak.prototype.generate_distinct_id = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    Trak.prototype.sign_out = function() {
      this.distinct_id(this.generate_distinct_id());
      return this.unset_company_id();
    };

    Trak.prototype._root_domain = null;

    Trak.prototype.root_domain = function(value) {
      if (!value && !this._root_domain) {
        this._root_domain = this.get_root_domain();
      }
      if (value) {
        this._root_domain = value;
      }
      return this._root_domain;
    };

    Trak.prototype.get_root_domain = function() {
      var domain, parts;
      if (this.hostname().match(/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/i) || this.hostname() === 'localhost') {
        return this.hostname();
      } else {
        parts = this.hostname().split('.');
        domain = parts.pop();
        while (parts.length > 0) {
          if (this.can_set_cookie({
            domain: domain
          })) {
            break;
          }
          domain = "" + (parts.pop()) + "." + domain;
        }
        return domain;
      }
    };

    Trak.prototype.set_cookie = function(key, value) {
      return cookie.set(this.cookie_key(key), value);
    };

    Trak.prototype.get_cookie = function(key) {
      return cookie.get(this.cookie_key(key));
    };

    Trak.prototype.can_set_cookie = function(options) {
      cookie.set(this.cookie_key('foo'), '');
      cookie.set(this.cookie_key('foo'), '', options);
      cookie.set(this.cookie_key('foo'), 'bar', options);
      return cookie.get(this.cookie_key('foo')) === 'bar';
    };

    Trak.prototype.cookie_key = function(key) {
      return "_trak_" + (this.api_token()) + "_" + key;
    };

    Trak.prototype.sort_arguments = function(values, types) {
      var r, type, value, _i, _len;
      values = Array.prototype.slice.call(values);
      r = [];
      value = values.shift();
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        if (type === typeof value || value === null) {
          r.push(value);
          value = values.shift();
        } else {
          r.push(null);
        }
      }
      return r;
    };

    Trak.prototype.debug_error = function(error) {
      if (console && console.error) {
        if (error.stack) {
          return console.error(error.stack);
        } else {
          return console.error(error);
        }
      }
    };

    return Trak;

  })();
});
