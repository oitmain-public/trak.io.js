// Generated by IcedCoffeeScript 1.4.0c

define(['jsonp', 'exceptions', 'dojo/io-query', 'cookie'], function(JSONP, Exceptions, ioQuery, cookie) {
  var Trak;
  return Trak = (function() {

    function Trak() {
      this.io = this;
    }

    Trak.prototype.initialize = function(_api_token, options) {
      this._api_token = _api_token;
      if (options == null) options = {};
      this.protocol(options.protocol);
      if (options.host) this.host(options.host);
      if (options.context) this.context(options.context);
      if (options.medium) this.medium(options.medium);
      this.distinct_id();
      if (options.track_page_views !== false) return this.page_view();
    };

    Trak.prototype.initialise = function() {
      return this.initialize.apply(this, arguments);
    };

    Trak.prototype.jsonp = new JSONP();

    Trak.prototype.call = function() {
      return this.jsonp.call.apply(this.jsonp, arguments);
    };

    Trak.prototype.identify = function(a1, a2) {
      var distinct_id, properties;
      if (_.isString(a1)) {
        distinct_id = a1;
        properties = a2;
        this.distinct_id(distinct_id);
      } else {
        properties = a1;
      }
      if (!properties) properties = {};
      if (!distinct_id) distinct_id = this.distinct_id();
      this.call('identify', {
        distinct_id: distinct_id,
        data: {
          properties: properties
        }
      });
      return null;
    };

    Trak.prototype.alias = function(a1, a2) {
      var alias, distinct_id, update_distinct;
      if (_.isString(a1) && _.isString(a2)) {
        distinct_id = a1;
        alias = a2;
        update_distinct = false;
      } else if (_.isString(a1) && _.isBoolean(a2)) {
        distinct_id = this.distinct_id();
        alias = a1;
        update_distinct = false;
      } else {
        distinct_id = this.distinct_id();
        alias = a1;
        update_distinct = true;
      }
      if (!alias) {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide an alias, see http://docs.trak.io/alias.html');
      }
      this.call('alias', {
        data: {
          distinct_id: distinct_id,
          alias: alias
        }
      });
      if (update_distinct) this.distinct_id(alias);
      return null;
    };

    Trak.prototype.track = function(a1, a2, a3, a4, a5) {
      var context, distinct_id, event, medium, properties;
      if (_.isString(a1) && (_.isObject(a2) || _.isUndefined(a2))) {
        event = a1;
        properties = a2;
        context = a3;
      } else if (_.isString(a1) && _.isString(a2) && (_.isObject(a3) || _.isUndefined(a3))) {
        event = a1;
        medium = a2;
        properties = a3;
        context = a4;
      } else if (_.isString(a1) && _.isString(a2) && _.isString(a3)) {
        distinct_id = a1;
        event = a2;
        medium = a3;
        properties = a4;
        context = a5;
      }
      if (!distinct_id) distinct_id = this.distinct_id();
      if (!context) context = {};
      _.merge(context, this.context());
      if (!medium) medium = this.medium();
      if (!properties) properties = {};
      if (!event) {
        throw new Exceptions.MissingParameter('Missing a required parameter.', 400, 'You must provide an event to track, see http://docs.trak.io/track.html');
      }
      this.call('track', {
        data: {
          distinct_id: distinct_id,
          event: event,
          medium: medium,
          context: context,
          properties: properties
        }
      });
      return null;
    };

    Trak.prototype.page_view = function(url, title) {
      if (url == null) url = this.url();
      if (title == null) title = this.page_title();
      return this.track('page_view', {
        url: url,
        page_title: title
      });
    };

    Trak.prototype._protocol = 'https';

    Trak.prototype.protocol = function(value) {
      if (value) this._protocol = value;
      return "" + this._protocol + "://";
    };

    Trak.prototype._host = 'api.trak.io';

    Trak.prototype.host = function(value) {
      if (value) this._host = value;
      return this._host;
    };

    Trak.prototype._current_context = false;

    Trak.prototype.current_context = function(key, value) {
      var c;
      if (!this._current_context) {
        if (c = this.get_cookie('context')) {
          this._current_context = JSON.parse(c);
        } else {
          this._current_context = {};
        }
      }
      if (typeof key === 'object') {
        _.merge(this._current_context, key);
      } else if (key && value) {
        this._current_context[key] = value;
      }
      this.set_cookie('context', JSON.stringify(this._current_context));
      return this._current_context;
    };

    Trak.prototype.default_context = function() {
      var referrer, url;
      url = this.url();
      referrer = this.referrer();
      return {
        ip: null,
        user_agent: navigator.userAgent,
        url: url,
        params: url.indexOf("?") > 0 ? ioQuery.queryToObject(url.substring(url.indexOf("?") + 1, url.length)) : {},
        referrer: referrer,
        referrer_params: referrer.indexOf("?") > 0 ? ioQuery.queryToObject(referrer.substring(referrer.indexOf("?") + 1, referrer.length)) : {}
      };
    };

    Trak.prototype.context = function(key, value) {
      var r;
      r = {};
      _.merge(r, this.default_context(), this.current_context(key, value));
      return r;
    };

    Trak.prototype.url = function() {
      return window.location.href;
    };

    Trak.prototype.referrer = function() {
      return document.referrer;
    };

    Trak.prototype.page_title = function() {
      return document.title;
    };

    Trak.prototype._medium = false;

    Trak.prototype.medium = function(value) {
      if (!this._medium && !(this._medium = this.get_cookie('medium'))) {
        this._medium = 'web_site';
      }
      if (value) {
        this._medium = value;
        this.set_cookie('medium', value);
      }
      return this._medium;
    };

    Trak.prototype._api_token = null;

    Trak.prototype.api_token = function() {
      return this._api_token;
    };

    Trak.prototype._distinct_id = null;

    Trak.prototype.distinct_id = function(value) {
      if (value) this._distinct_id = value;
      if (!this._distinct_id && !(this._distinct_id = this.get_cookie('id'))) {
        this._distinct_id = this.generate_distinct_id();
      }
      this.set_cookie('id', this._distinct_id);
      return this._distinct_id;
    };

    Trak.prototype.generate_distinct_id = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    Trak.prototype.set_cookie = function(key, value) {
      return cookie.set(this.cookie_key(key), value);
    };

    Trak.prototype.get_cookie = function(key) {
      return cookie.get(this.cookie_key(key));
    };

    Trak.prototype.cookie_key = function(key) {
      return "_trak_" + (this.api_token()) + "_" + key;
    };

    return Trak;

  })();
});
