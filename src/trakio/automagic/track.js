// Generated by IcedCoffeeScript 1.7.1-b
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['trakio/lodash'], function(_) {
  var Track;
  return Track = (function() {
    function Track() {
      this.map_form_inputs = __bind(this.map_form_inputs, this);
      this.map_properties = __bind(this.map_properties, this);
      this.track_properties = __bind(this.track_properties, this);
      this.events = __bind(this.events, this);
      this.should_track = __bind(this.should_track, this);
      this.event_fired = __bind(this.event_fired, this);
      this.page_ready = __bind(this.page_ready, this);
      this.initialize = __bind(this.initialize, this);
    }

    Track.prototype.initialize = function(automagic, options) {
      this.automagic = automagic;
      this.options = options;
    };

    Track.prototype.page_ready = function() {};

    Track.prototype.event_fired = function(element, event, callback, automagic_ready) {
      var e, events, track_completed, _i, _len;
      try {
        if (_.matches(element, this.options.selector) && this.options.should_track.call(this.automagic, element, event)) {
          events = this.events(element, event);
          track_completed = 0;
          if (events.length > 0) {
            for (_i = 0, _len = events.length; _i < _len; _i++) {
              event = events[_i];
              trak.io.track(event, this.track_properties(element), function() {
                track_completed += 1;
                if (track_completed >= events.length) {
                  automagic_ready.track = true;
                  return callback();
                }
              });
            }
            return;
          }
        }
      } catch (_error) {
        e = _error;
        trak.io.debug_error(e);
      }
      automagic_ready.track = true;
      return callback();
    };

    Track.prototype.should_track = function(element, event) {
      return true;
    };

    Track.prototype.should_track_events = {
      signed_in: function(element, event) {
        var fields_count, fields_count_less_one_checkbox, inputs, properties, submit;
        properties = this.map_properties(element);
        inputs = this.map_form_inputs(element);
        fields_count = fields_count_less_one_checkbox = _.find('input:not([type=submit]), select', element).length;
        if (_.find('input[type=checkbox]', element).length > 0) {
          fields_count_less_one_checkbox = fields_count - 1;
        }
        submit = _.find('[type=submit]', element)[0];
        return (properties['username'] || properties['email']) && _.find('[type=password]', element).length === 1 && (!submit || !submit.value.match(/(sign.?up)|register|create/i)) && fields_count_less_one_checkbox === 2;
      },
      signed_up: function(element, event) {
        var fields_count, fields_count_less_one_checkbox, inputs, properties;
        properties = this.map_properties(element);
        inputs = this.map_form_inputs(element);
        fields_count = fields_count_less_one_checkbox = _.find('input:not([type=submit]), select', element).length;
        if (_.find('input[type=checkbox]', element).length > 0) {
          fields_count_less_one_checkbox = fields_count - 1;
        }
        return !this.should_track_events.signed_in.call(this, element, event) && (properties['username'] || properties['email']) && fields_count_less_one_checkbox >= 2;
      },
      subscribed_with_email: function(element, event) {
        var properties;
        properties = this.map_properties(element);
        return _.find('input:not([type=submit])').length === 1 && properties['email'];
      },
      submitted_form: function(element, event) {
        return _.matches(element, 'form');
      }
    };

    Track.prototype.events = function(element) {
      var condition, event, r, _ref;
      r = [];
      _ref = this.options.should_track_events;
      for (event in _ref) {
        condition = _ref[event];
        if (condition.call(this.automagic, element)) {
          r.push(event);
        }
      }
      return r;
    };

    Track.prototype.track_properties = function(element) {
      var action, c, id, r, referrer;
      r = {};
      if ((id = element.id).length > 0) {
        r.id = id;
      }
      if ((c = _.attr(element, 'class')) && c.length > 0) {
        r["class"] = c.split(' ');
      }
      if ((action = _.attr(element, 'action')) && action.length > 0) {
        r.action = action;
      }
      if ((referrer = window.location.href).length > 0) {
        r.referrer = referrer;
      }
      return r;
    };

    Track.prototype.map_properties = function(element) {
      return this.automagic.identify.map_properties(element);
    };

    Track.prototype.map_form_inputs = function(element) {
      var input, r, select, _i, _j, _len, _len1, _ref, _ref1;
      r = {};
      _ref = _.find('input:not([type=submit])', element);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        r[_.attr(input, 'name')] = _.attr(input, 'type');
      }
      _ref1 = _.find('select', element);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        select = _ref1[_j];
        r[_.attr(input, 'name')] = 'select';
      }
      return r;
    };

    return Track;

  })();
});
