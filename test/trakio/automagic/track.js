// Generated by IcedCoffeeScript 1.7.1-b
describe('trakio/automagic/track', function() {
  _;
  var automagic, automagic_options, callback, event, form;
  form = memoize().as_haml("");
  event = memoize().as(function() {
    return new MockEvent('submit', form(), {
      automagic_ready: {},
      callback: callback()
    });
  });
  automagic = memoize().as(function() {
    return new Trak.Automagic().initialize(automagic_options());
  });
  automagic_options = memoize().as(function() {
    return {};
  });
  callback = memoize().as(function() {
    return sinon.spy();
  });
  before(function(done) {
    return requirejs(['trakio/lodash'], function(lodash) {
      var _;
      _ = lodash;
      return done();
    });
  });
  beforeEach(function() {
    sinon.stub(trak.io, 'identify');
    return sinon.stub(trak.io, 'track');
  });
  afterEach(function() {
    if (trak.io.track.restore) {
      trak.io.track.restore();
    }
    if (trak.io.identify.restore) {
      return trak.io.identify.restore();
    }
  });
  return describe('#event_fired', function() {
    value(form).equals_haml("%form#my_form.a_form.another_class{ action: \"/my_action/path\" }\n  %input{ name: \"user[a_username_field]\", value: \"username_value\" }\n  %input{ name: \"user[an_email_field]\", value: \"email_value\" }\n  %input{ name: \"user[a_name_field]\", value: \"name_value\" }\n  %input{ name: \"user[a_first_name_field]\", value: \"first_name_value\" }\n  %input{ name: \"user[a_last_name_field]\", value: \"last_name_value\" }\n  %input{ name: \"user[a_company_field]\", value: \"company_value\" }\n  %input{ name: \"user[a_position_field]\", value: \"position_value\" }\n  %input{ name: \"user[an_organisation_field]\", value: \"organisation_value\" }\n  %input{ name: \"user[an_industry_field]\", value: \"industry_value\" }\n  %input{ name: \"user[an_location_field]\", value: \"location_value\" }\n  %input{ name: \"user[an_latlng_field]\", value: \"latlng_value\" }\n  %input{ name: \"user[an_birthday_field]\", value: \"birthday_value\" }");
    it("passes callback along to trak.io.track", function() {
      automagic().track.event_fired(form(), event(), callback(), {});
      trak.io.track.should.have.been.called;
      trak.io.track.should.have.been.calledWith(sinon.match.string, sinon.match.object, sinon.match.func);
      trak.io.track["yield"]();
      return callback().should.have.been.called;
    });
    it("fires a 'form_submitted' event", function() {
      automagic().event_fired(event(), callback());
      return trak.io.track.should.have.been.calledWith('submitted_form', sinon.match.object, sinon.match.func);
    });
    it("sends id", function() {
      automagic().event_fired(event(), callback());
      return trak.io.track.should.have.been.calledWith(sinon.match.string, sinon.match({
        id: 'my_form'
      }), sinon.match.func);
    });
    it("sends classes", function() {
      automagic().event_fired(event(), callback());
      return trak.io.track.should.have.been.calledWith(sinon.match.string, sinon.match({
        "class": ['a_form', 'another_class']
      }), sinon.match.func);
    });
    it("sends action", function() {
      automagic().event_fired(event(), callback());
      return trak.io.track.should.have.been.calledWith(sinon.match.string, sinon.match({
        action: '/my_action/path'
      }), sinon.match.func);
    });
    it("sends referrer", function() {
      automagic().event_fired(event(), callback());
      return trak.io.track.should.have.been.calledWith(sinon.match.string, sinon.match({
        referrer: sinon.match(/\/test\/trak\.io\.automagic(\.min)?\.html/)
      }), sinon.match.func);
    });
    context("when a form with username and an additional field is submitted", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[an_organization_field]\", value: \"organisation_value\" }");
      return it("fires a 'signed_up' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_up', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with username and password and an additional fields", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[confirm]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[submit]\", value: \"Submit\", type: \"submit\" }");
      return it("fires a 'signed_up' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_up', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with just and username and single password is submitted but 'sign up' in submit", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[remember]\", value: \"remember_value\", type: \"checkbox\" }\n  %input{ name: \"user[submit]\", value: \"Sign up\", type: \"submit\" }");
      return it("fires a 'signed_up' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_up', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with just and username and single password is submitted but 'Register' in submit", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[remember]\", value: \"remember_value\", type: \"checkbox\" }\n  %input{ name: \"user[submit]\", value: \"Register\", type: \"submit\" }");
      return it("fires a 'signed_up' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_up', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with just and username and single password is submitted but 'Create' in submit", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[submit]\", value: \"Create account\", type: \"submit\" }");
      return it("fires a 'signed_up' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_up', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with just and username and single password is submitted", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[username]\", value: \"username_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[remember]\", value: \"remember_value\", type: \"checkbox\" }\n  %input{ name: \"user[submit]\", value: \"Submit\", type: \"submit\" }");
      return it("fires a 'signed_in' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_in', sinon.match.object, sinon.match.func);
      });
    });
    context("when a form with just email and single password is submitted", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[email]\", value: \"email_value\" }\n  %input{ name: \"user[pass]\", value: \"password_value\", type: \"password\" }\n  %input{ name: \"user[remember]\", value: \"remember_value\", type: \"checkbox\" }\n  %input{ name: \"user[submit]\", value: \"Submit\", type: \"submit\" }");
      return it("fires a 'signed_in' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('signed_in', sinon.match.object, sinon.match.func);
      });
    });
    return context("when a form with just email is submitted", function() {
      value(form).equals_haml("%form.a_form\n  %input{ name: \"user[email]\", value: \"email_value\" }\n  %input{ name: \"user[submit]\", value: \"Submit\", type: \"submit\" }");
      return it("fires a 'subscribed_with_email' event", function() {
        automagic().event_fired(event(), callback());
        return trak.io.track.should.have.been.calledWith('subscribed_with_email', sinon.match.object, sinon.match.func);
      });
    });
  });
});
