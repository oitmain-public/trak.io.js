// Generated by IcedCoffeeScript 1.4.0c

requirejs(['exceptions'], function(Exceptions) {
  return describe('Trak', function() {
    before(function() {
      sinon.stub(trak.io, 'call');
      return trak.io._distinct_id = null;
    });
    after(function() {
      trak.io.call.restore();
      return trak.io._distinct_id = null;
    });
    describe('#alias()', function() {
      return it("raises Exceptions.MissingParameter", function() {
        return expect(function() {
          return trak.io.alias();
        }).to["throw"](Exceptions.MissingParameter);
      });
    });
    describe('#alias(alias)', function() {
      it("calls #call", function() {
        var previous_id;
        previous_id = trak.io.distinct_id();
        trak.io.alias('my_alias');
        return trak.io.call.should.have.been.calledWith('alias', {
          data: {
            distinct_id: previous_id,
            alias: 'my_alias'
          }
        });
      });
      return it("sets current distinct_id to the alias", function() {
        trak.io.alias('my_alias');
        trak.io.distinct_id().should.equal('my_alias');
        return cookie.get("_trak_" + (trak.io.api_token()) + "_id").should.equal('my_alias');
      });
    });
    describe('#alias(alias, false)', function() {
      it("calls #call", function() {
        trak.io.alias('my_alias');
        return trak.io.call.should.have.been.calledWith('alias', {
          data: {
            distinct_id: trak.io.distinct_id(),
            alias: 'my_alias'
          }
        });
      });
      return it("doesn't set current distinct_id to the alias", function() {
        var previous_id;
        previous_id = trak.io.distinct_id();
        trak.io.alias('my_alias', false);
        trak.io.distinct_id().should.equal(previous_id);
        return cookie.get("_trak_" + (trak.io.api_token()) + "_id").should.equal(previous_id);
      });
    });
    return describe('#alias(distinct_id, alias)', function() {
      it("calls #call", function() {
        trak.io.alias('custom_distinct_id', 'my_alias');
        return trak.io.call.should.have.been.calledWith('alias', {
          data: {
            distinct_id: 'custom_distinct_id',
            alias: 'my_alias'
          }
        });
      });
      return it("doesn't set current distinct_id to the alias", function() {
        var previous_id;
        previous_id = trak.io.distinct_id();
        trak.io.alias('custom_distinct_id', 'my_alias');
        trak.io.distinct_id().should.equal(previous_id);
        return cookie.get("_trak_" + (trak.io.api_token()) + "_id").should.equal(previous_id);
      });
    });
  });
});
