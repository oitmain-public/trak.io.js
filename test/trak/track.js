// Generated by IcedCoffeeScript 1.4.0c

requirejs(['exceptions'], function(Exceptions) {
  return describe('Trak', function() {
    before(function() {
      sinon.stub(trak.io, 'call');
      sinon.stub(trak.io, 'distinct_id').returns('default_distinct_id');
      sinon.stub(trak.io, 'context').returns({
        "default": 'context'
      });
      return sinon.stub(trak.io, 'medium').returns('default_medium');
    });
    after(function() {
      trak.io.call.restore();
      trak.io.distinct_id.restore();
      trak.io.context.restore();
      return trak.io.medium.restore();
    });
    describe('#track()', function() {
      return it("raises Exceptions.MissingParameter", function() {
        return expect(function() {
          return trak.io.track();
        }).to["throw"](Exceptions.MissingParameter);
      });
    });
    describe('#track(event)', function() {
      return it("calls #call", function() {
        trak.io.track('my_event');
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'default_medium',
            context: {
              "default": 'context'
            },
            properties: {}
          }
        });
      });
    });
    describe('#track(event, properties)', function() {
      return it("calls #call", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.track('my_event', properties);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'default_medium',
            context: {
              "default": 'context'
            },
            properties: properties
          }
        });
      });
    });
    describe('#track(event, properties, context)', function() {
      it("calls #call merging contexts", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_event', properties, context);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'default_medium',
            context: {
              "default": 'context',
              my: 'context'
            },
            properties: properties
          }
        });
      });
      return it("doesn't change trak.io.context()", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_event', properties, context);
        return trak.io.context.should.have.been.calledWithExactly();
      });
    });
    describe('#track(event, medium)', function() {
      return it("calls #call", function() {
        trak.io.track('my_event', 'my_medium');
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context'
            },
            properties: {}
          }
        });
      });
    });
    describe('#track(event, medium, properties)', function() {
      it("calls #call", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.track('my_event', 'my_medium', properties);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context'
            },
            properties: properties
          }
        });
      });
      return it("doesn't change trak.io.medium()", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.track('my_event', 'my_medium', properties);
        return trak.io.medium.should.have.been.calledWithExactly();
      });
    });
    describe('#track(event, medium, properties, context)', function() {
      it("calls #call merging contexts", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_event', 'my_medium', properties, context);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'default_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context',
              my: 'context'
            },
            properties: properties
          }
        });
      });
      it("doesn't change trak.io.context()", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_event', 'my_medium', properties, context);
        return trak.io.context.should.have.been.calledWithExactly();
      });
      return it("doesn't change trak.io.medium()", function() {
        var context, properties;
        properties = {
          foo: 'bar'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_event', 'my_medium', properties, context);
        return trak.io.medium.should.have.been.calledWithExactly();
      });
    });
    describe('#track(distinct_id, event, medium)', function() {
      it("calls #call", function() {
        trak.io.track('my_distinct_id', 'my_event', 'my_medium');
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'my_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context'
            },
            properties: {}
          }
        });
      });
      it("doesn't change trak.io.distinct_id()", function() {
        trak.io.track('my_distinct_id', 'my_event', 'my_medium');
        return trak.io.distinct_id.should.have.been.calledWithExactly();
      });
      return it("doesn't change trak.io.medium()", function() {
        trak.io.track('my_distinct_id', 'my_event', 'my_medium');
        return trak.io.medium.should.have.been.calledWithExactly();
      });
    });
    describe('#track(distinct_id, event, medium, properties)', function() {
      it("calls #call", function() {
        var properties;
        properties = {
          my: 'properties'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'my_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context'
            },
            properties: properties
          }
        });
      });
      it("doesn't change trak.io.distinct_id()", function() {
        var properties;
        properties = {
          my: 'properties'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties);
        return trak.io.distinct_id.should.have.been.calledWithExactly();
      });
      return it("doesn't change trak.io.medium()", function() {
        var properties;
        properties = {
          my: 'properties'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties);
        return trak.io.medium.should.have.been.calledWithExactly();
      });
    });
    return describe('#track(distinct_id, event, medium, properties, context)', function() {
      it("calls #call merging contexts", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties, context);
        return trak.io.call.should.have.been.calledWith('track', {
          data: {
            distinct_id: 'my_distinct_id',
            event: 'my_event',
            medium: 'my_medium',
            context: {
              "default": 'context',
              my: 'context'
            },
            properties: properties
          }
        });
      });
      it("doesn't change trak.io.distinct_id()", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties, context);
        return trak.io.distinct_id.should.have.been.calledWithExactly();
      });
      it("doesn't change trak.io.medium()", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties, context);
        return trak.io.medium.should.have.been.calledWithExactly();
      });
      return it("doesn't change trak.io.context()", function() {
        var context, properties;
        properties = {
          my: 'properties'
        };
        context = {
          my: 'context'
        };
        trak.io.track('my_distinct_id', 'my_event', 'my_medium', properties, context);
        return trak.io.context.should.have.been.calledWithExactly();
      });
    });
  });
});
