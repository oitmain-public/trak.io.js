// Generated by IcedCoffeeScript 1.4.0c

requirejs([], function() {
  return describe('Trak', function() {
    beforeEach(function() {
      return sinon.stub(trak.io, 'call');
    });
    afterEach(function() {
      return trak.io.call.restore();
    });
    describe('#identify(properties)', function() {
      return it("calls #call", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.identify(properties);
        return trak.io.call.should.have.been.calledWith('identify', {
          distinct_id: trak.io.distinct_id(),
          data: {
            properties: properties
          }
        });
      });
    });
    describe('#identify(distinct_id)', function() {
      beforeEach(function() {
        return sinon.stub(trak.io, 'alias');
      });
      afterEach(function() {
        return trak.io.alias.restore();
      });
      it("doesn't bother with #call", function() {
        trak.io.identify('my_distinct_id');
        return trak.io.call.should.not.have.been.calledWith('identify');
      });
      return it("calls alias with the distinct_id", function() {
        trak.io.identify('my_distinct_id');
        return trak.io.alias.should.have.been.calledWith('my_distinct_id');
      });
    });
    describe('#identify(distinct_id, callback)', function() {
      return it("executes callback immediately", function() {
        var callback;
        callback = sinon.spy();
        trak.io.identify('my_distinct_id', callback);
        return callback.should.have.been.calledWith({
          status: 'unnecessary'
        });
      });
    });
    return describe('#identify(distinct_id, properties)', function() {
      it("calls #call", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.identify('my_distinct_id', properties);
        return trak.io.call.should.have.been.calledWith('identify', {
          distinct_id: 'my_distinct_id',
          data: {
            properties: properties
          }
        });
      });
      return it("sets the distinct_id", function() {
        var properties;
        properties = {
          foo: 'bar'
        };
        trak.io.identify('my_distinct_id', properties);
        trak.io.distinct_id().should.equal('my_distinct_id');
        return cookie.get("_trak_" + (trak.io.api_token()) + "_id").should.equal('my_distinct_id');
      });
    });
  });
});
