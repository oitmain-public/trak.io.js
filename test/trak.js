// Generated by IcedCoffeeScript 1.4.0c

requirejs(['trak', 'cookie'], function(Trak, cookie) {
  return describe.only('Trak', function() {
    afterEach(function() {
      cookie.empty();
      trak.io._protocol = 'https';
      trak.io._host = 'api.trak.io';
      trak.io._current_context = false;
      trak.io._medium = false;
      return trak.io._distinct_id = null;
    });
    describe('#initialize', function() {
      it("stores api token", function() {
        trak.io.initialize('api_token_value');
        return trak.io.api_token().should.equal('api_token_value');
      });
      it("stores protocol option", function() {
        trak.io.initialize('api_token_value', {
          protocol: 'http'
        });
        return trak.io.protocol().should.equal('http://');
      });
      it("stores host option", function() {
        trak.io.initialize('api_token_value', {
          host: 'custom_host.com'
        });
        return trak.io.host().should.equal('custom_host.com');
      });
      it("stores context option", function() {
        trak.io.initialize('api_token_value', {
          context: {
            foo: 'bar'
          }
        });
        return trak.io.current_context().should.eql({
          foo: 'bar'
        });
      });
      it("stores medium option", function() {
        trak.io.initialize('api_token_value', {
          medium: 'custom_medium'
        });
        return trak.io.medium().should.equal('custom_medium');
      });
      it("stores distinct_id option", function() {
        trak.io.initialize('api_token_value', {
          distinct_id: 'custom_distinct_id'
        });
        return trak.io.distinct_id().should.equal('custom_distinct_id');
      });
      it("set up default options", function() {
        var trak;
        trak = new Trak();
        trak.io.initialize('api_token_value');
        trak.io.protocol().should.equal('https://');
        trak.io.host().should.equal('api.trak.io');
        trak.io.current_context().should.eql({});
        return trak.io.medium().should.equal('web_site');
      });
      it.only("calls #page_view", function() {
        sinon.stub(trak.io, 'track');
        sinon.stub(trak.io, 'url').returns('page_url');
        sinon.stub(trak.io, 'page_title').returns('A page title');
        trak.io.initialize('api_token_value');
        trak.io.track.should.have.been.calledWith('page_view', {
          url: 'page_url',
          page_title: 'A page title'
        });
        trak.io.track.restore();
        trak.io.page_title.restore();
        return trak.io.url.restore();
      });
      return it("doesn't call #page_view if track_page_views", function() {
        sinon.stub(trak.io, 'track');
        sinon.stub(trak.io, 'url').returns('page_url');
        sinon.stub(trak.io, 'page_title').returns('A page title');
        trak.io.initialize('api_token_value', {
          track_page_views: false
        });
        trak.io.track.should.not.have.been.called;
        trak.io.track.restore();
        trak.io.page_title.restore();
        return trak.io.url.restore();
      });
    });
    describe('#initialise', function() {
      return it("aliases #initialize", function() {
        var arg;
        sinon.stub(trak.io, 'initialize');
        arg = 'a';
        trak.io.initialise(arg);
        trak.io.initialize.should.have.been.calledWith(arg);
        return trak.io.initialize.restore();
      });
    });
    describe('#protocol', function() {
      it("returns https by default", function() {
        return trak.io.protocol().should.equal('https://');
      });
      return it("returns provided value plus :// if set", function() {
        trak.io.protocol('http').should.equal('http://');
        return trak.io.protocol().should.equal('http://');
      });
    });
    describe('#host', function() {
      it("returns api.trak.io by default", function() {
        return trak.io.host().should.equal('api.trak.io');
      });
      return it("allows value to be set", function() {
        trak.io.host('custom.com').should.equal('custom.com');
        return trak.io.host().should.equal('custom.com');
      });
    });
    describe('#call', function() {
      return it("calls .jsonp.call with arguments", function() {
        var argument1, argument2, jsonp_call;
        jsonp_call = sinon.stub(trak.io.jsonp, 'call');
        argument1 = 'a';
        argument2 = 'b';
        trak.io.call(argument1, argument2);
        return jsonp_call.should.have.been.calledWith(argument1, argument2);
      });
    });
    describe('#api_token', function() {
      return it("retuns provided api_token", function() {
        trak.io.initialize('my_api_token');
        return trak.io.api_token().should.equal('my_api_token');
      });
    });
    describe('#distinct_id', function() {
      it("generates custom distinct_id if non provided", function() {
        return trak.io.distinct_id().should.match(/[0-9a-f]{7}\-[0-9a-f]{4}-4[0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}/);
      });
      it("returns the provided value", function() {
        trak.io.distinct_id('my_distinct_id').should.equal('my_distinct_id');
        return trak.io.distinct_id().should.equal('my_distinct_id');
      });
      it("sets value in cookie", function() {
        trak.io.distinct_id('my_distinct_id');
        return cookie.get("_trak_" + (trak.io.api_token()) + "_id").should.equal('my_distinct_id');
      });
      return it("gets distinct_id based on cookie", function() {
        cookie.set("_trak_" + (trak.io.api_token()) + "_id", 'distinct_id_value');
        return trak.io.distinct_id().should.equal('distinct_id_value');
      });
    });
    describe('#context', function() {
      it("returns null ip by default, when we sent null to api.trak.io it will fill it in from request", function() {
        return expect(trak.io.context().ip).to.be["null"];
      });
      it("returns user agent by default", function() {
        return trak.io.context().user_agent.should.equal(navigator.userAgent);
      });
      it("returns current url by default", function() {
        sinon.stub(trak.io, 'url').returns('http://example.com/?a=b&c=d');
        trak.io.context().url.should.equal('http://example.com/?a=b&c=d');
        return trak.io.url.restore();
      });
      it("returns params by default", function() {
        sinon.stub(trak.io, 'url').returns('http://example.com/?a=b&c=d');
        trak.io.context().params.should.eql({
          a: 'b',
          c: 'd'
        });
        return trak.io.url.restore();
      });
      it("returns referrer by default", function() {
        sinon.stub(trak.io, 'referrer').returns('http://referrer.com/?a=b&c=d');
        trak.io.context().referrer.should.equal('http://referrer.com/?a=b&c=d');
        return trak.io.referrer.restore();
      });
      it("returns referrer params by default", function() {
        sinon.stub(trak.io, 'referrer').returns('http://referrer.com/?a=b&c=d');
        trak.io.context().referrer_params.should.eql({
          a: 'b',
          c: 'd'
        });
        return trak.io.referrer.restore();
      });
      it("allows individual contexts to be set", function() {
        trak.io.context('foo', 'bar').foo.should.equal('bar');
        return trak.io.context().foo.should.equal('bar');
      });
      it("allows contexts to be set", function() {
        var added_to, initial;
        initial = trak.io.context({
          override: 'foo',
          keep: 'foo'
        });
        initial.override.should.equal('foo');
        initial.keep.should.equal('foo');
        added_to = trak.io.context({
          override: 'bar',
          add: 'bar'
        });
        added_to.override.should.equal('bar');
        added_to.keep.should.equal('foo');
        return added_to.add.should.equal('bar');
      });
      it("merges provided with defaults", function() {
        sinon.stub(trak.io, 'url').returns('http://example.com/?a=b&c=d');
        sinon.stub(trak.io, 'referrer').returns('http://referrer.com/?a=b&c=d');
        trak.io.context({
          foo: 'bar'
        }).should.eql({
          ip: null,
          user_agent: navigator.userAgent,
          url: 'http://example.com/?a=b&c=d',
          referrer: 'http://referrer.com/?a=b&c=d',
          params: {
            a: 'b',
            c: 'd'
          },
          referrer_params: {
            a: 'b',
            c: 'd'
          },
          foo: 'bar'
        });
        trak.io.url.restore();
        return trak.io.referrer.restore();
      });
      it("stores any additional contexts in a cookie", function() {
        trak.io.context('foo', 'bar');
        return cookie.get("_trak_" + (trak.io.api_token()) + "_context").should.eql(JSON.stringify({
          foo: 'bar'
        }));
      });
      return it("retrieve any additional contexts in a cookie", function() {
        cookie.set("_trak_" + (trak.io.api_token()) + "_context", JSON.stringify({
          foo: 'bar'
        }));
        return trak.io.context().foo.should.equal('bar');
      });
    });
    return describe('#medium', function() {
      it("returns 'web_site' by default", function() {
        return trak.io.medium().should.equal('web_site');
      });
      it("returns provided value if set", function() {
        trak.io.medium('custom_medium').should.equal('custom_medium');
        return trak.io.medium().should.equal('custom_medium');
      });
      it("stores value in cookie", function() {
        trak.io.medium('cookie_medium');
        return cookie.get("_trak_" + (trak.io.api_token()) + "_medium").should.eql('cookie_medium');
      });
      return it("retrieve any additional medium in a cookie", function() {
        cookie.set("_trak_" + (trak.io.api_token()) + "_medium", 'cookie_medium');
        return trak.io.medium().should.equal('cookie_medium');
      });
    });
  });
});
