// Generated by IcedCoffeeScript 1.7.1-b
var Memoized;

window.memoize = window.memoized = window.value = function(variable) {
  if (variable) {
    return variable;
  } else {
    return new Memoized();
  }
};

Memoized = function() {
  var r;
  r = function() {
    if (typeof r.f === 'function') {
      return r.v || (r.v = r.f());
    } else {
      return r.v || (r.v = r.f);
    }
  };
  r.equals = function(f, now) {
    if (now == null) {
      now = false;
    }
    r.f2 = f;
    if (now) {
      r.f = f;
    } else {
      beforeEach(function() {
        return r.f = f;
      });
    }
    afterEach(function() {
      r.f = null;
      return r.v = null;
    });
    return r;
  };
  r.equals_now = function(f) {
    return r.equals(f, true);
  };
  r.as = r.equals;
  r.call_now = function() {
    if (r.f2) {
      r.v = r.f2();
    }
    return r;
  };
  r.equals_haml = function(string, now) {
    if (now == null) {
      now = false;
    }
    r.equals(function() {
      var div, html;
      html = eval(Haml.compile(string));
      div = document.createElement('div');
      div.setAttribute('class', 'memoized-html');
      div.innerHTML = html;
      document.body.appendChild(div);
      if (!Memoized.cleanups_registered) {
        afterEach(function() {
          var element, _i, _len, _ref, _results;
          _ref = _.find('.memoized-html');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            element = _ref[_i];
            _results.push(element.parentNode.removeChild(element));
          }
          return _results;
        });
        Memoized.cleanups_registered = true;
      }
      return div.children[0];
    }, now);
    return r;
  };
  r.as_haml = r.equals_haml;
  r.equals_haml_now = function(string) {
    r.equals_haml(string, true);
    return r;
  };
  r.as_haml_now = r.equals_haml_now;
  return r;
};

Memoized.cleanups_registered = false;

window.MockEvent = function(event, target, properties) {
  if (properties == null) {
    properties = {};
  }
  properties['type'] = event;
  properties['srcElement'] = target;
  properties['currentTarget'] = target;
  properties['target'] = target;
  properties = _.fixEvent(properties);
  return properties;
};
